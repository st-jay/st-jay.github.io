{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blog/adding-social-login-to-your-website-with-supertokens/",
    "result": {"data":{"site":{"siteMetadata":{"title":"SuperTokens Blog"}},"markdownRemark":{"id":"ff2a62cf-a9e5-54fd-afdb-698d219a408a","excerpt":"This tutorial walks you through integrating your frontend with social login APIs provided by SuperTokens. Note, that it’s only meant for users who are building…","html":"<p>This tutorial walks you through integrating your frontend with social login APIs provided by SuperTokens.</p>\n<blockquote>\n<p>Note, that it’s only meant for users who are building their own frontend and are building a website. If you are using our pre built UI, these API integrations are already done for you.</p>\n</blockquote>\n<p>To start off, you want to make sure that you have finished the frontend and backend quick setup guides for <a href=\"https://supertokens.com/docs/community/recipes\">the recipe</a> that you have chosen.</p>\n<p>As of this writing, that’s either:</p>\n<ul>\n<li><a href=\"https://supertokens.com/docs/thirdparty/introduction\">ThirdParty recipe</a> (only social login)</li>\n<li><a href=\"https://supertokens.com/docs/thirdpartyemailpassword/introduction\">ThirdPartyEmailPassword recipe</a> (social + email password login)</li>\n</ul>\n<p>After finishing the quick setup guides, you should have:</p>\n<ul>\n<li>Session feature setup on the frontend</li>\n<li>All social auth + sessions related APIs exposed via your backend API (as per <a href=\"https://app.swaggerhub.com/apis/supertokens/FDI\">this API spec</a>).</li>\n</ul>\n<p>Now we can see how to integrate your frontend UI to work with the backend social auth APIs exposed by SuperTokens.</p>\n<blockquote>\n<p>For ease of explanation, we will assume the following:</p>\n</blockquote>\n<p>We want to implement sign in with GitHub</p>\n<ul>\n<li>Your website domain is <code class=\"language-text\">http://localhost:3000</code></li>\n<li>Your API domain is <code class=\"language-text\">http://localhost:3001</code></li>\n<li>You have chosen the default <code class=\"language-text\">api base path</code> and <code class=\"language-text\">website base path</code> (<code class=\"language-text\">/auth</code> in both the cases)</li>\n<li>You want to implement the <strong>thirdpartyemailpassword</strong> recipe.</li>\n<li>The authorisation redirect URL set on the github dashboard is <code class=\"language-text\">http://localhost:3000/auth/callback/github</code></li>\n</ul>\n<p>On a high level, there are two steps to the flow:</p>\n<ul>\n<li>When the user clicks on the <code class=\"language-text\">Sign in with GitHub</code> button, you want to fetch the GitHub redirect URL and redirect the user to that page. This is where the user will interact with GitHub to enter their credentials.</li>\n<li>When GitHub redirects the user back to your app, you want to use the (one time use) auth code issues by Github to sign in / sign up the user.</li>\n</ul>\n<h3>Step 1</h3>\n<p>When the user clicks on <code class=\"language-text\">Sign in with GitHub</code> button, you want to make the following API call:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`const response = await fetch('http://localhost:3001/auth/authorisationurl?thirdPartyId=github', \n  {\n    method: 'GET',\n    headers: {\n      rid: “thirdpartyemailpassword”\n    }\n  }\n);`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-code-title\">src/api.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/auth/authorisationurl?thirdPartyId=github'</span><span class=\"token punctuation\">,</span> \n  <span class=\"token punctuation\">{</span>\n    method<span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n    headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      rid<span class=\"token operator\">:</span> “thirdpartyemailpassword”\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>A successful response will look something like:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`{\n  &quot;status&quot;: &quot;OK&quot;,\n  &quot;url&quot;: &quot;https://github.com/login/oauth/authorize?scope=read%3Auser+user%3Aemail&client_id=21d82062d1f35b68e66c&quot;\n}`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://github.com/login/oauth/authorize?scope=read%3Auser+user%3Aemail&amp;client_id=21d82062d1f35b68e66c\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Couple of pointers:</p>\n<ul>\n<li>As stated previously, we assume that your API is on <code class=\"language-text\">http://localhost:3001</code> and the api base path is <code class=\"language-text\">/auth</code>. Therefore, the resulting API URL is <code class=\"language-text\">http://localhost:3001/auth/authorisationurl</code>.</li>\n<li>This API takes one query param which is the <code class=\"language-text\">thirdPartyId</code> field. Since we are implementing logic with GitHub, the value of this is <code class=\"language-text\">github</code>. If we were implementing login with Google, the value of this would be <code class=\"language-text\">google</code>.</li>\n<li>The header contains a special <code class=\"language-text\">rid</code> field whose value is <code class=\"language-text\">thirdpartyemailpassword</code>. This helps the backend SDK know which recipe to send this request to. If you are implementing the <code class=\"language-text\">thirdparty</code> recipe, the value of this header should be <code class=\"language-text\">thirdparty</code></li>\n<li>The response is where the user is supposed to be redirected to. The URL contains the scopes and the github client ID you configured on the backend when following the <a href=\"https://supertokens.com/docs/thirdpartyemailpassword/quick-setup/backend\">quick setup > backend guide</a>.</li>\n</ul>\n<p>The URL returned in the response is where you will redirect your user to. Before doing that though, you will need to append a query param called <code class=\"language-text\">redirect_uri</code> to this <code class=\"language-text\">url</code> whose value should be the callback URL you configured on the GitHub dashboard. We assume that this URL is <code class=\"language-text\">http://localhost:3000/auth/callback/github.</code></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`let urlObj = new URL(response.url)\n\nurlObj.searchParams.append(&quot;redirect_uri&quot;, &quot;http://localhost:3000/auth/callback/github&quot;);\n\nlet url = urlObj.toString();`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> urlObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n\nurlObj<span class=\"token punctuation\">.</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"redirect_uri\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://localhost:3000/auth/callback/github\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> urlObj<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The value of <code class=\"language-text\">url</code> after the above operation will be:</p>\n<p><code class=\"language-text\">https://github.com/login/oauth/authorize?scope=read%3Auser+user%3Aemail&amp;client_id=21d82062d1f35b68e66c&amp;edirect_uri=http%3A%2F%2Flocalhost%3A3000%2Fauth%2Fcallback%2Fgithub</code></p>\n<p>As you can see, we have appended the <code class=\"language-text\">redirect_uri</code> query param successfully. Now we can redirect the user to this URL.</p>\n<h3>Step 2</h3>\n<p>When the user is navigated back to your app (from GitHub), the URL will contain a <code class=\"language-text\">code</code> query param (on successful login), like this:</p>\n<p><code class=\"language-text\">http://localhost:3000/callback/github?code=3cf143e0af0f1bed8d34</code></p>\n<p>First, you need to extract this code in the following way:</p>\n<p><code class=\"language-text\">let code = new URL(window.location.href).searchParams.get('code');</code></p>\n<p>Then, you need to call another API exposed by the SuperTokens backend SDK to complete the login operation:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`const response = await fetch('http://localhost:3001/auth/signinup', {\n  method: 'POST',\n  headers: {\n    ‘rid’: “thirdpartyemailpassword”,\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    code,\n    redirectURI: ”http://localhost:3000/callback/github”,\n      thirdPartyId: “github”\n  }\n});`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/auth/signinup'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n  headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    ‘rid’<span class=\"token operator\">:</span> “thirdpartyemailpassword”<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    code<span class=\"token punctuation\">,</span>\n    redirectURI<span class=\"token operator\">:</span> ”http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>localhost<span class=\"token operator\">:</span><span class=\"token number\">3000</span><span class=\"token operator\">/</span>callback<span class=\"token operator\">/</span>github”<span class=\"token punctuation\">,</span>\n      thirdPartyId<span class=\"token operator\">:</span> “github”\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Successful execution will result in a response that looks something like:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`{\n  &quot;status&quot;: &quot;OK&quot;,\n  &quot;user&quot;: {\n    &quot;id&quot;: &quot;fa7a0841-b533-4478-95533-0fde890c3483&quot;,\n    &quot;email&quot;: &quot;johndoe@gmail.com&quot;\n  },\n  &quot;createdNewUser&quot;: true\n}`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"user\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fa7a0841-b533-4478-95533-0fde890c3483\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"johndoe@gmail.com\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"createdNewUser\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A few important points:</p>\n<ul>\n<li>The <code class=\"language-text\">redirectURI</code> in the request body is the same as what you had put on the GitHub dashboard.</li>\n<li>Just like the previous API call, we add a <code class=\"language-text\">rid</code> header with the value of <code class=\"language-text\">thirdpartyemailpassword</code>.</li>\n</ul>\n<h2>Where are the session tokens?</h2>\n<p>From inspecting the response from the <code class=\"language-text\">/signinup</code> API call, we don’t see an access token / JWT in the body - so where are they?</p>\n<p>SuperTokens issues session cookies that get sent via the <code class=\"language-text\">Set-Cookie</code> header in the response and is automatically handled by the browser.</p>\n<p><img src=\"./set-cookie-header.png\" alt=\"Set-Cookie Header\"></p>\n<p>Furthermore, our frontend SDK handles these session tokens for you automatically:</p>\n<ul>\n<li>Automatic refresh of session</li>\n<li>Automatic injection of the access token for your API calls</li>\n<li>Provides a signOut function</li>\n</ul>\n<p>These features are a part of the session recipe that you initialised when following the quick setup guide.</p>\n<h2>Conclusion</h2>\n<p>We have seen how to integrate your custom UI with the social login API exposed by SuperToken’s backend SDK. It involves calling the GET <code class=\"language-text\">/authorisationurl</code> and the POST <code class=\"language-text\">/signinup</code> API. Furthermore, we see that on successful login, we are issued cookie based session tokens which are handled automatically via our frontend SDK.</p>","frontmatter":{"title":"Adding social login to your website with SuperTokens (custom UI only)","date":"January 26, 2022","description":"This blog walks you through integrating your frontend with social login APIs provided by SuperTokens.","cover":"/covers/cover.png"}},"previous":{"fields":{"slug":"/blog/new-beginnings/"},"frontmatter":{"title":"New Beginnings"}},"next":null},"pageContext":{"id":"ff2a62cf-a9e5-54fd-afdb-698d219a408a","previousPostId":"6707114f-5e1d-5394-b938-f0b0542e2cf7","nextPostId":null}},
    "staticQueryHashes": ["2841359383"]}